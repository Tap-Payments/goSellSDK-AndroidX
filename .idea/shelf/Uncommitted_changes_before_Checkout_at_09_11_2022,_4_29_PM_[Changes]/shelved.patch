Index: library/src/main/java/company/tap/gosellapi/internal/activities/GoSellPaymentActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.gosellapi.internal.activities;\n\n\nimport static company.tap.gosellapi.internal.viewholders.GooglePaymentViewHolder.googlePayButton;\n\nimport android.app.Activity;\nimport android.app.AlertDialog;\nimport android.content.Intent;\nimport android.graphics.Bitmap;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.net.http.SslError;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.os.CountDownTimer;\nimport android.os.Handler;\nimport android.util.Log;\nimport android.view.Gravity;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.ViewTreeObserver;\nimport android.view.animation.TranslateAnimation;\nimport android.webkit.ClientCertRequest;\nimport android.webkit.SslErrorHandler;\nimport android.webkit.WebResourceError;\nimport android.webkit.WebResourceRequest;\nimport android.webkit.WebResourceResponse;\nimport android.webkit.WebSettings;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\nimport android.widget.FrameLayout;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.RelativeLayout;\nimport android.widget.ScrollView;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.RequiresApi;\nimport androidx.fragment.app.DialogFragment;\nimport androidx.fragment.app.Fragment;\nimport androidx.fragment.app.FragmentManager;\nimport androidx.fragment.app.FragmentTransaction;\n\nimport com.bumptech.glide.Glide;\nimport com.bumptech.glide.request.RequestOptions;\nimport com.google.android.gms.common.api.Status;\nimport com.google.android.gms.tasks.Task;\nimport com.google.android.gms.wallet.AutoResolveHelper;\nimport com.google.android.gms.wallet.IsReadyToPayRequest;\nimport com.google.android.gms.wallet.PaymentData;\nimport com.google.android.gms.wallet.PaymentsClient;\nimport com.google.gson.Gson;\nimport com.google.gson.JsonObject;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.Optional;\n\nimport company.tap.gosellapi.R;\nimport company.tap.gosellapi.internal.api.callbacks.APIRequestCallback;\nimport company.tap.gosellapi.internal.api.callbacks.GoSellError;\nimport company.tap.gosellapi.internal.api.enums.AuthenticationStatus;\nimport company.tap.gosellapi.internal.api.enums.ChargeStatus;\nimport company.tap.gosellapi.internal.api.enums.ExtraFeesStatus;\nimport company.tap.gosellapi.internal.api.facade.GoSellAPI;\nimport company.tap.gosellapi.internal.api.models.AmountedCurrency;\nimport company.tap.gosellapi.internal.api.models.Authenticate;\nimport company.tap.gosellapi.internal.api.models.Authorize;\nimport company.tap.gosellapi.internal.api.models.Charge;\nimport company.tap.gosellapi.internal.api.models.PaymentOption;\nimport company.tap.gosellapi.internal.api.models.SaveCard;\nimport company.tap.gosellapi.internal.api.models.SavedCard;\nimport company.tap.gosellapi.internal.api.models.Token;\nimport company.tap.gosellapi.internal.api.requests.CreateTokenGPayRequest;\nimport company.tap.gosellapi.internal.api.responses.BINLookupResponse;\nimport company.tap.gosellapi.internal.api.responses.DeleteCardResponse;\nimport company.tap.gosellapi.internal.custom_views.OTPFullScreenDialog;\nimport company.tap.gosellapi.internal.data_managers.LoadingScreenManager;\nimport company.tap.gosellapi.internal.data_managers.PaymentDataManager;\nimport company.tap.gosellapi.internal.data_managers.payment_options.PaymentOptionsDataManager;\nimport company.tap.gosellapi.internal.data_managers.payment_options.view_models.CardCredentialsViewModel;\nimport company.tap.gosellapi.internal.data_managers.payment_options.view_models.GooglePayViewModel;\nimport company.tap.gosellapi.internal.data_managers.payment_options.view_models.GroupViewModel;\nimport company.tap.gosellapi.internal.data_managers.payment_options.view_models.RecentSectionViewModel;\nimport company.tap.gosellapi.internal.data_managers.payment_options.view_models.WebPaymentViewModel;\nimport company.tap.gosellapi.internal.fragments.GoSellPaymentOptionsFragment;\nimport company.tap.gosellapi.internal.interfaces.ICardDeleteListener;\nimport company.tap.gosellapi.internal.interfaces.IPaymentProcessListener;\nimport company.tap.gosellapi.internal.utils.ActivityDataExchanger;\nimport company.tap.gosellapi.internal.utils.PaymentsUtil;\nimport company.tap.gosellapi.internal.utils.Utils;\n\nimport company.tap.gosellapi.open.buttons.PayButtonView;\nimport company.tap.gosellapi.open.controllers.SDKSession;\nimport company.tap.gosellapi.open.controllers.ThemeObject;\nimport company.tap.gosellapi.open.data_manager.PaymentDataSource;\nimport company.tap.gosellapi.open.enums.AppearanceMode;\nimport company.tap.gosellapi.open.enums.TransactionMode;\nimport io.card.payment.CardIOActivity;\nimport io.card.payment.CreditCard;\n\n/**\n * The type Go sell payment activity.\n */\npublic class GoSellPaymentActivity extends BaseActivity implements PaymentOptionsDataManager.PaymentOptionsDataListener, IPaymentProcessListener, OTPFullScreenDialog.ConfirmOTP,\n        ICardDeleteListener {\n    private static final int SCAN_REQUEST_CODE = 123;\n    private static final int CURRENCIES_REQUEST_CODE = 124;\n    private static final int WEB_PAYMENT_REQUEST_CODE = 125;\n    private static final int ASYNCHRONOUS_REQUEST_CODE = 126;\n\n    private PaymentOptionsDataManager dataSource;\n    private FragmentManager fragmentManager;\n\n    private PayButtonView payButton;\n\n    private CardCredentialsViewModel cardCredentialsViewModel;\n    private RecentSectionViewModel recentSectionViewModel;\n    private boolean saveCardChecked;\n    private Charge chargeOrAuthorizeOrSaveCard;\n    private SavedCard savedCard;\n    private WebPaymentViewModel webPaymentViewModel;\n    private GooglePayViewModel googlePayViewModel;\n\n    private AppearanceMode apperanceMode;\n\n    static int mAppHeight;\n    static int currentOrientation = -1;\n\n    private boolean keyboardVisible = false;\n\n    private GroupViewModel groupViewModel;\n\n    private boolean selectedCurrencyAsynchronous = false;\n\n    private ScrollView main_windowed_scrollview;\n    private static final String TAG = \"GoSellPaymentActivity\";\n\n    // Arbitrarily-picked constant integer you define to track a request for payment data activity.\n    private static final int LOAD_PAYMENT_DATA_REQUEST_CODE = 991;\n\n    // A client for interacting with the Google Pay API.\n    private PaymentsClient paymentsClient;\n\n    public static boolean gPayFlag = false;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n\n        overridePendingTransition(R.anim.slide_in_top, android.R.anim.fade_out);\n        if(PaymentDataSource.getInstance().getTransactionMode() == TransactionMode.PURCHASE){\n            paymentsClient = PaymentsUtil.createPaymentsClient(this);\n            if(PaymentDataSource.getInstance().getGooglePaymentOptions().size()!=0){\n                possiblyShowGooglePayButton();\n            }\n\n\n        }\n        setupScreenMode();\n        apperanceMode = ThemeObject.getInstance().getAppearanceMode();\n\n        if (apperanceMode == AppearanceMode.WINDOWED_MODE) {\n            setContentView(R.layout.gosellapi_activity_main_windowed);\n            main_windowed_scrollview = findViewById(R.id.main_windowed_scrollview);\n        } else {\n            setContentView(R.layout.gosellapi_activity_main);\n        }\n\n\n        fragmentManager = getSupportFragmentManager();\n        /**\n         *  PaymentOptionsDataManager >> is the main actor who decide layout content\n         */\n        dataSource = PaymentDataManager.getInstance().getPaymentOptionsDataManager(this);\n\n        final FrameLayout fragmentContainer = findViewById(R.id.paymentActivityFragmentContainer);\n\n        //Register a callback to be invoked when the global layout state or the visibility of views within the view tree changes\n        fragmentContainer.getViewTreeObserver()\n                .addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\n                    @Override\n                    public void onGlobalLayout() {\n                        dataSource.setAvailableHeight(fragmentContainer.getHeight());\n\n                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN)\n                            fragmentContainer.getViewTreeObserver().removeOnGlobalLayoutListener(this);\n                        else\n                            fragmentContainer.getViewTreeObserver().removeGlobalOnLayoutListener(this);\n\n                    }\n\n                });\n        initViews();\n        SDKSession.getListener().sessionHasStarted();\n\n        saveCardChecked = false;\n//        setKeyboardVisibilityListener();\n\n\n        if (recentSectionViewModel != null) recentSectionViewModel.EnableRecentView();\n        if (webPaymentViewModel != null) webPaymentViewModel.enableWebView();\n        PaymentDataManager.getInstance().setCardPaymentProcessStatus(false);\n        if (cardCredentialsViewModel != null) cardCredentialsViewModel.enableCardScanView();\n\n    }\n\n    private void initViews() {\n        GoSellPaymentOptionsFragment paymentOptionsFragment = GoSellPaymentOptionsFragment\n                .newInstance(dataSource);\n\n        fragmentManager\n                .beginTransaction()\n                .replace(R.id.paymentActivityFragmentContainer, paymentOptionsFragment, \"CARD\")\n                .commit();\n\n        setupHeader();\n\n        payButton = findViewById(R.id.payButtonId);\n        payButton.setEnabled(false);\n        if (ThemeObject.getInstance().getPayButtonDisabledTitleColor() != 0)\n            payButton.getPayButton().setTextColor(ThemeObject.getInstance().getPayButtonDisabledTitleColor());\n\n        payButton.setOnClickListener(v -> {\n            payButton.setEnabled(false);\n            if (payButton.getLoadingView() != null) payButton.getLoadingView().start();\n\n            // notify merchant with user decision about saving card\n\n            if (cardCredentialsViewModel != null)\n                SDKSession.getListener().userEnabledSaveCardOption(cardCredentialsViewModel.shouldSaveCard());\n\n\n\n            boolean keyBoardHidden =  Utils.hideKeyboard(GoSellPaymentActivity.this);\n            Log.d(TAG, \"sKeyboard hidden .... after click pay button : \"+keyBoardHidden );\n            startPaymentWithTimer();\n\n\n        });\n\n        setupPayButton();\n    }\n\n    private void setupScreenMode() {\n        if(isTransactionModeTokenizeCard()|| isTransactionModeSaveCard()) {\n            ThemeObject.getInstance().setAppearanceMode(AppearanceMode.WINDOWED_MODE);\n        }\n    }\n\n\n    @Override\n    public void onBackPressed() {\n        SDKSession.getListener().sessionCancelled();\n        if (recentSectionViewModel != null) recentSectionViewModel.EnableRecentView();\n        if (webPaymentViewModel != null) webPaymentViewModel.enableWebView();\n        PaymentDataManager.getInstance().setCardPaymentProcessStatus(false);\n        if (cardCredentialsViewModel != null) cardCredentialsViewModel.enableCardScanView();\n        super.onBackPressed();\n\n    }\n\n    private void setupHeader() {\n        androidx.appcompat.widget.Toolbar toolbar = findViewById(R.id.toolbar);\n        TextView cancel_payment_text = findViewById(R.id.cancel_payment_icon);\n\n        LinearLayout cancel_payment_ll = findViewById(R.id.cancel_payment);\n\n        cancel_payment_ll.setOnClickListener(v -> onBackPressed());\n\n        ////////////////////////////////////////////////////////////////////////////////////////////\n        ImageView businessIcon = findViewById(R.id.businessIcon);\n        TextView businessName = findViewById(R.id.businessName);\n        String header_title = \"\";\n//|| isTransactionModeTokenizeCard()\n        if (isTransactionModeSaveCard() ) {\n            header_title = getString(R.string.textview_disclaimer_save_card_header_title);\n\n            LinearLayout businessIconNameContainer = findViewById(R.id.businessIconNameContainer);\n            businessIconNameContainer.removeView(businessIcon);\n            businessIconNameContainer.removeView(businessName);\n            LinearLayout.LayoutParams ll = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n            ll.leftMargin = 0;\n            ll.bottomMargin = 5;\n            ll.topMargin = 18;\n            ll.gravity = Gravity.CENTER_VERTICAL;\n            businessName.setLayoutParams(ll);\n            businessIconNameContainer.addView(businessName);\n\n            cancel_payment_ll.removeView(cancel_payment_text);\n            LinearLayout.LayoutParams ll2 = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n            ll2.leftMargin = 0;\n            ll2.bottomMargin = 5;\n            ll2.topMargin = 18;\n            ll2.gravity = Gravity.CENTER_VERTICAL;\n            cancel_payment_text.setLayoutParams(ll2);\n            cancel_payment_ll.addView(cancel_payment_text);\n\n\n        } else {\n            String logoPath = \"\";\n            if (PaymentDataManager.getInstance().getPaymentOptionsDataManager().getPaymentOptionsResponse() != null &&\n                    PaymentDataManager.getInstance().getPaymentOptionsDataManager().getPaymentOptionsResponse().getMerchant() != null &&\n                    PaymentDataManager.getInstance().getPaymentOptionsDataManager().getPaymentOptionsResponse().getMerchant().getLogo() != null\n            ) {\n\n                logoPath = PaymentDataManager.getInstance().getPaymentOptionsDataManager().getPaymentOptionsResponse().getMerchant().getLogo();\n\n                if (!logoPath.equalsIgnoreCase(\"\") && logoPath != null)\n                    Glide.with(this).load(logoPath).apply(RequestOptions.circleCropTransform()).into(businessIcon);\n\n                header_title = PaymentDataManager.getInstance().getPaymentOptionsDataManager().getPaymentOptionsResponse().getMerchant().getName();\n            }\n        }\n        businessName.setText(header_title);\n\n\n        if (ThemeObject.getInstance().getHeaderFont() != null)\n            businessName.setTypeface(ThemeObject.getInstance().getHeaderFont());\n        if (ThemeObject.getInstance().getHeaderTextColor() != 0)\n            businessName.setTextColor(ThemeObject.getInstance().getHeaderTextColor());\n        if (ThemeObject.getInstance().getHeaderTextSize() != 0)\n            businessName.setTextSize(ThemeObject.getInstance().getHeaderTextSize());\n        if (ThemeObject.getInstance().getHeaderBackgroundColor() != 0)\n            toolbar.setBackgroundColor(ThemeObject.getInstance().getHeaderBackgroundColor());\n    }\n\n    private void setupPayButton() {\n        if (ThemeObject.getInstance().getPayButtonTextSize() != 0)\n            payButton.getPayButton().setTextSize(ThemeObject.getInstance().getPayButtonTextSize());\n        if (ThemeObject.getInstance().isPayButtSecurityIconVisible()==false){\n            payButton.getSecurityIconView().setVisibility(View.INVISIBLE);\n\n        }else{\n            payButton.getSecurityIconView().setVisibility(View.VISIBLE);\n\n        }\n        if (ThemeObject.getInstance().isPayButtLoaderVisible()==false){\n            payButton.getLoadingView().setVisibility(View.INVISIBLE);\n\n        }else {\n            payButton.getLoadingView().setVisibility(View.VISIBLE);\n\n        }\n\n        if (isTransactionModeSaveCard()) {\n            setupSaveCardMode();\n        } else {\n            setupChargeOrAuthorizeMode();\n        }\n    }\n\n    private void setupChargeOrAuthorizeMode() {\n        if (ThemeObject.getInstance().getPayButtonResourceId() != 0)\n            payButton.setBackgroundSelector(ThemeObject.getInstance().getPayButtonResourceId());\n\n        if (ThemeObject.getInstance().getPayButtonFont() != null)\n            payButton.getPayButton().setTypeface(ThemeObject.getInstance().getPayButtonFont());\n        if (ThemeObject.getInstance().getPayButtonDisabledTitleColor() != 0)\n            payButton.getPayButton().setTextColor(ThemeObject.getInstance().getPayButtonDisabledTitleColor());\n\n        if (ThemeObject.getInstance().getPayButtonText() != null){\n            payButton.getPayButton().setText(String\n                    .format(\"%s %s %s\", getResources().getString(R.string.pay),\n                            dataSource.getSelectedCurrency().getSymbol(),\n                            dataSource.getSelectedCurrency().getAmount()));\n\n        }else {\n\n            if (dataSource.getSelectedCurrency() != null)\n                payButton.getPayButton().setText(String\n                        .format(\"%s %s %s\", getResources().getString(R.string.pay),\n                                dataSource.getSelectedCurrency().getSymbol(),\n                                dataSource.getSelectedCurrency().getAmount()));\n        }\n    }\n\n    private void setupSaveCardMode() {\n        if (ThemeObject.getInstance().getPayButtonResourceId() != 0)\n            payButton.setBackgroundSelector(ThemeObject.getInstance().getPayButtonResourceId());\n\n        if (ThemeObject.getInstance().getPayButtonFont() != null)\n            payButton.getPayButton().setTypeface(ThemeObject.getInstance().getPayButtonFont());\n\n        if (ThemeObject.getInstance().getPayButtonDisabledTitleColor() != 0)\n            payButton.getPayButton().setTextColor(ThemeObject.getInstance().getPayButtonDisabledTitleColor());\n\n        if (isTransactionModeSaveCard()) {\n\n            if (ThemeObject.getInstance().getPayButtonText() != null) {\n                payButton.getPayButton().setText(ThemeObject.getInstance().getPayButtonText());\n\n            }else{\n                payButton.getPayButton().setText(getResources().getString(R.string.save_card));\n            }\n\n        }\n        //Removed as per Merchant 13/07/21\n       /* if (isTransactionModeTokenizeCard()){\n\n            if (ThemeObject.getInstance().getPayButtonText() != null) {\n                payButton.getPayButton().setText(ThemeObject.getInstance().getPayButtonText());\n\n            }else{\n                payButton.getPayButton().setText(getResources().getString(R.string.tokenize));\n\n            }\n        }\n*/\n        }\n\n\n\n\n    private boolean isTransactionModeSaveCard() {\n        if(PaymentDataManager.getInstance().getPaymentOptionsRequest()!=null){\n            ThemeObject.getInstance().setAppearanceMode(AppearanceMode.WINDOWED_MODE);\n            return PaymentDataManager.getInstance().getPaymentOptionsRequest().getTransactionMode() == TransactionMode.SAVE_CARD;\n        }else return false;\n    }\n\n    private boolean isTransactionModeTokenizeCard() {\n        if(PaymentDataManager.getInstance().getPaymentOptionsRequest()!=null){\n        return PaymentDataManager.getInstance().getPaymentOptionsRequest().getTransactionMode() == TransactionMode.TOKENIZE_CARD;\n        }else return false;\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    private void setSelectedCard(SavedCard recentItem) {\n        this.savedCard = recentItem;\n    }\n\n    private SavedCard getSavedCard() {\n        return this.savedCard;\n    }\n\n    //  ///////////////////////////////////////////////////////////////////////////////////////////////\n    @Override\n    public void startCurrencySelection(ArrayList<AmountedCurrency> currencies,\n                                       AmountedCurrency selectedCurrency) {\n        Intent intent = new Intent(this, CurrenciesActivity.class);\n        intent.putExtra(CurrenciesActivity.CURRENCIES_ACTIVITY_DATA, currencies);\n        intent.putExtra(CurrenciesActivity.CURRENCIES_ACTIVITY_INITIAL_SELECTED_CURRENCY,\n                selectedCurrency);\n\n        startActivityForResult(intent, CURRENCIES_REQUEST_CODE);\n\n        // custom animation like swapping from left to right\n        overridePendingTransition(R.anim.slide_from_right, R.anim.slide_to_left);\n    }\n\n    /**\n     * start web payment activity\n     */\n\n    @Override\n    public void startWebPayment(WebPaymentViewModel model) {\n\n        if (model == null) return;\n\n        this.webPaymentViewModel = model;\n\n        if (model.getData() != null)\n            selectedCurrencyAsynchronous = model.getData().isAsynchronous();\n\n        PaymentDataManager.getInstance().checkWebPaymentExtraFees(model, this);\n    }\n\n    private void startWebPaymentProcess1() {\n        if (selectedCurrencyAsynchronous) {\n            PaymentDataManager.getInstance().initiatePayment(webPaymentViewModel, this);\n            payButton.setEnabled(true);\n            payButton.setClickable(false);\n            payButton.getLoadingView().start();\n\n        } else {\n            Intent intent = new Intent(this, WebPaymentActivity.class);\n            ActivityDataExchanger.getInstance().setWebPaymentViewModel(webPaymentViewModel);\n            startActivityForResult(intent, WEB_PAYMENT_REQUEST_CODE);\n        }\n        if (webPaymentViewModel != null) webPaymentViewModel.disableWebView();\n\n    }\n\n    @Override\n    public void startScanCard() {\n        Intent scanCard = new Intent(this, CardIOActivity.class);\n        scanCard.putExtra(CardIOActivity.EXTRA_REQUIRE_EXPIRY, true); // default: false\n        scanCard.putExtra(CardIOActivity.EXTRA_REQUIRE_CVV, true); // default: false\n        scanCard.putExtra(CardIOActivity.EXTRA_REQUIRE_POSTAL_CODE, false); // default: false\n        scanCard.putExtra(CardIOActivity.EXTRA_SUPPRESS_CONFIRMATION, true);\n        scanCard.putExtra(CardIOActivity.EXTRA_REQUIRE_CARDHOLDER_NAME, true);\n        scanCard.putExtra(CardIOActivity.EXTRA_USE_PAYPAL_ACTIONBAR_ICON, false);\n        scanCard.putExtra(CardIOActivity.EXTRA_SUPPRESS_MANUAL_ENTRY, true);\n        scanCard.putExtra(CardIOActivity.EXTRA_HIDE_CARDIO_LOGO, true);\n\n        startActivityForResult(scanCard, SCAN_REQUEST_CODE);\n    }\n\n    private void startSavedCardPaymentProcess() {\n        PaymentDataManager.getInstance().checkSavedCardPaymentExtraFees(getSavedCard(), this);\n\n    }\n\n    private void startCardPaymentProcess(CardCredentialsViewModel paymentOptionViewModel) {\n        if (cardCredentialsViewModel != null) cardCredentialsViewModel.disableCardScanView();\n        if (webPaymentViewModel != null) webPaymentViewModel.disableWebView();\n        if (recentSectionViewModel != null) recentSectionViewModel.disableRecentView();\n        PaymentDataManager.getInstance().setCardPaymentProcessStatus(true);\n        if (PaymentDataManager.getInstance().getExternalDataSource().getTransactionMode() == TransactionMode.TOKENIZE_CARD)\n            initCardTokenization();\n        else\n            PaymentDataManager.getInstance().checkCardPaymentExtraFees(paymentOptionViewModel, this);\n    }\n\n    ///////////////////////////////////////////////////  start function that initiate payment by creating charge --------------------------\n    private void getVisibleViewModels() {\n        for (int i = 0; i < PaymentDataManager.getInstance().getPaymentOptionsDataManager().getSize(); i++) {\n            if (PaymentDataManager.getInstance().getPaymentOptionsDataManager().getViewModel(i) instanceof RecentSectionViewModel) {\n                recentSectionViewModel = (RecentSectionViewModel) PaymentDataManager.getInstance().getPaymentOptionsDataManager().getViewModel(i);\n\n            } else if (PaymentDataManager.getInstance().getPaymentOptionsDataManager().getViewModel(i) instanceof GroupViewModel) {\n                groupViewModel = (GroupViewModel) PaymentDataManager.getInstance().getPaymentOptionsDataManager().getViewModel(i);\n\n            } else if (PaymentDataManager.getInstance().getPaymentOptionsDataManager().getViewModel(i) instanceof WebPaymentViewModel) {\n                webPaymentViewModel = (WebPaymentViewModel) PaymentDataManager.getInstance().getPaymentOptionsDataManager().getViewModel(i);\n\n            } else if (PaymentDataManager.getInstance().getPaymentOptionsDataManager().getViewModel(i) instanceof CardCredentialsViewModel) {\n                cardCredentialsViewModel = (CardCredentialsViewModel) PaymentDataManager.getInstance().getPaymentOptionsDataManager().getViewModel(i);\n\n            }else if (PaymentDataManager.getInstance().getPaymentOptionsDataManager().getViewModel(i) instanceof GooglePayViewModel) {\n                googlePayViewModel = (GooglePayViewModel) PaymentDataManager.getInstance().getPaymentOptionsDataManager().getViewModel(i);\n\n            }\n        }\n    }\n\n    private void initSavedCardPaymentProcess() {\n        getVisibleViewModels();\n\n        if (cardCredentialsViewModel != null) cardCredentialsViewModel.disableCardScanView();\n        if (webPaymentViewModel != null) webPaymentViewModel.disableWebView();\n        PaymentDataManager.getInstance().setCardPaymentProcessStatus(true);\n        PaymentDataManager.getInstance()\n                .initiateSavedCardPayment(getSavedCard(), recentSectionViewModel, this);\n    }\n\n    private void initCardPaymentProcess() {\n        getVisibleViewModels();\n\n        if (recentSectionViewModel != null) recentSectionViewModel.disableRecentView();\n        if (cardCredentialsViewModel != null) cardCredentialsViewModel.disableCardScanView();\n        if (webPaymentViewModel != null) webPaymentViewModel.disableWebView();\n        PaymentDataManager.getInstance().setCardPaymentProcessStatus(true);\n        PaymentDataManager.getInstance().initiatePayment(cardCredentialsViewModel, this);\n    }\n\n    private void initCardTokenization() {\n        getVisibleViewModels();\n\n        if (cardCredentialsViewModel != null) cardCredentialsViewModel.disableCardScanView();\n        PaymentDataManager.getInstance().initCardTokenizationPayment(cardCredentialsViewModel, this);\n    }\n\n    ///////////////////////////////////////////////////  end of function that initiate payment by creating charge --------------------------\n\n    @Override\n    public void updatePayButtonWithExtraFees(PaymentOption paymentOption) {\n\n        updatePayButtonWithFees(paymentOption);\n\n    }\n\n    @Override\n    public void savedCardClickedForDeletion(@NonNull String cardId) {\n\n        if (PaymentDataManager.getInstance().getExternalDataSource().getCustomer() == null)\n            return;\n        payButton.setEnabled(false);\n        if (ThemeObject.getInstance().getPayButtonDisabledTitleColor() != 0)\n            payButton.getPayButton().setTextColor(ThemeObject.getInstance().getPayButtonDisabledTitleColor());\n\n        LoadingScreenManager.getInstance().showLoadingScreen(this);\n        PaymentDataManager.getInstance().deleteCard(\n                PaymentDataManager.getInstance().getExternalDataSource().getCustomer().getIdentifier(),\n                cardId,\n                this);\n    }\n\n    @Override\n    public void disablePayButton() {\n        payButton.setEnabled(false);\n        if (ThemeObject.getInstance().getPayButtonDisabledTitleColor() != 0)\n            payButton.getPayButton().setTextColor(ThemeObject.getInstance().getPayButtonDisabledTitleColor());\n    }\n\n\n    private void updatePayButtonWithFees(PaymentOption paymentOption) {\n\n        BigDecimal feesAmount = PaymentDataManager.getInstance()\n                .calculateCardExtraFees(paymentOption);\n\n//        Log.d(\"GoSellPaymentActivity\",\" update pay button with : fees : \" + feesAmount);\n\n        if (isTransactionModeSaveCard() ) return;\n       if( ThemeObject.getInstance().getPayButtonText() != null){\n\n           payButton.getPayButton().setText(\n                   String.format(\"%s %s\", ThemeObject.getInstance().getPayButtonText(),\n                           PaymentDataManager.getInstance()\n                                   .calculateTotalAmount(feesAmount)));\n       }else\n        payButton.getPayButton().setText(\n                String.format(\"%s %s\", getResources().getString(R.string.pay),\n                        PaymentDataManager.getInstance()\n                                .calculateTotalAmount(feesAmount)));\n    }\n\n    @Override\n    public void updatePayButtonWithSavedCardExtraFees(SavedCard recentItem,\n                                                      RecentSectionViewModel _recentSectionViewModel) {\n        this.recentSectionViewModel = _recentSectionViewModel;\n        getVisibleViewModels();\n\n\n        setSelectedCard(recentItem);\n\n        if (recentItem != null) {\n            payButton.setEnabled(true);\n            if (ThemeObject.getInstance().getPayButtonEnabledTitleColor() != 0)\n                payButton.getPayButton().setTextColor(ThemeObject.getInstance().getPayButtonEnabledTitleColor());\n            PaymentOption paymentOption = PaymentDataManager.getInstance()\n                    .findSavedCardPaymentOption(recentItem);\n\n            updatePayButtonWithFees(paymentOption);\n        }\n    }\n\n    @Override\n    public void cardExpirationDateClicked(CardCredentialsViewModel model) {\n\n        String selectedMonth = null;\n        String selectedYear = null;\n\n\n        String modelExpirationMonth = model.getExpirationMonth();\n        if (modelExpirationMonth != null && !modelExpirationMonth.isEmpty()) {\n\n            selectedMonth = modelExpirationMonth;\n        }\n\n        String modelExpirationYear = model.getExpirationYear();\n        if (modelExpirationYear != null && !modelExpirationYear.isEmpty()) {\n\n            selectedYear = modelExpirationYear;\n        }\n\n       /* DatePicker.showInContext(this, selectedMonth, selectedYear,\n                (month, year) -> dataSource.cardExpirationDateSelected(month, year));*/\n    }\n\n\n    @Override\n    public void cardDetailsFilled(boolean isFilled,\n                                  CardCredentialsViewModel _cardCredentialsViewModel) {\n        setSelectedCard(null);\n        cardCredentialsViewModel = _cardCredentialsViewModel;\n\n        if (!isFilled && payButton.getLoadingView() != null && payButton.getLoadingView().isShown()) {\n            payButton.getLoadingView().setForceStop(true);\n        }\n\n        if (isFilled)\n            if (ThemeObject.getInstance().getPayButtonEnabledTitleColor() != 0)\n                payButton.getPayButton().setTextColor(ThemeObject.getInstance().getPayButtonEnabledTitleColor());\n            else if (ThemeObject.getInstance().getPayButtonDisabledTitleColor() != 0)\n                payButton.getPayButton().setTextColor(ThemeObject.getInstance().getPayButtonDisabledTitleColor());\n\n        payButton.setEnabled(isFilled);\n    }\n\n\n    @Override\n    public void addressOnCardClicked() {\n        BINLookupResponse binLookupResponse = PaymentDataManager.getInstance().getBinLookupResponse();\n        if (binLookupResponse == null) return;\n        Intent intent = new Intent(this, GoSellCardAddressActivity.class);\n        intent.putExtra(GoSellCardAddressActivity.INTENT_EXTRA_KEY_COUNTRY,\n                binLookupResponse.getCountry());\n        startActivity(intent);\n    }\n\n    @Override\n    public void saveCardSwitchClicked(boolean isChecked, int saveCardBlockPosition) {\n        saveCardChecked = isChecked;\n    }\n\n    @Override\n    public void binNumberEntered(String binNumber) {\n//        Log.d(\"GoSellPaymentActivity\",\" binNumberEntered >>> binNumber:\" + binNumber);\n        GoSellAPI.getInstance()\n                .retrieveBINLookupBINLookup(binNumber, new APIRequestCallback<BINLookupResponse>() {\n                    @Override\n                    public void onSuccess(int responseCode, BINLookupResponse serializedResponse) {\n                        dataSource.showAddressOnCardCell(true);\n                        PaymentDataManager.getInstance().setBinLookupResponse(serializedResponse);\n                        dataSource.setCurrentBINData(serializedResponse);\n                    }\n\n                    @Override\n                    public void onFailure(GoSellError errorDetails) {\n                        dataSource.showAddressOnCardCell(false);\n                        PaymentDataManager.getInstance().setBinLookupResponse(null);\n                        dataSource.setCurrentBINData(null);\n                    }\n                });\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////\n    @Override\n    public void fireWebPaymentExtraFeesUserDecision(ExtraFeesStatus choice) {\n        switch (choice) {\n            case NO_EXTRA_FEES:\n            case ACCEPT_EXTRA_FEES:\n                startWebPaymentProcess1();\n                break;\n            case REFUSE_EXTRA_FEES:\n                LoadingScreenManager.getInstance().closeLoadingScreen();\n                if (payButton != null && payButton.getLoadingView() != null)\n                    payButton.getLoadingView().setForceStop(true);\n                payButton.setEnabled(true);\n                break;\n        }\n    }\n\n    @Override\n    public void fireCardPaymentExtraFeesUserDecision(ExtraFeesStatus userChoice) {\n        if (payButton != null && payButton.getLoadingView() != null)\n            payButton.getLoadingView().setForceStop(true);\n        switch (userChoice) {\n            case ACCEPT_EXTRA_FEES:\n            case NO_EXTRA_FEES:\n                initCardPaymentProcess();\n                break;\n            case REFUSE_EXTRA_FEES:\n                LoadingScreenManager.getInstance().closeLoadingScreen();\n                payButton.setEnabled(true);\n                break;\n        }\n    }\n\n    @Override\n    public void fireSavedCardPaymentExtraFeesUserDecision(ExtraFeesStatus userChoice) {\n        if (payButton != null && payButton.getLoadingView() != null)\n            payButton.getLoadingView().setForceStop(true);\n        switch (userChoice) {\n            case ACCEPT_EXTRA_FEES:\n            case NO_EXTRA_FEES:\n                initSavedCardPaymentProcess();\n                break;\n            case REFUSE_EXTRA_FEES:\n                LoadingScreenManager.getInstance().closeLoadingScreen();\n                payButton.setEnabled(true);\n                break;\n        }\n    }\n\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n\n    private void openOTPScreen(Charge charge) {\n        stopPayButtonLoadingView();\n        if (charge.getAuthenticate() != null) {\n            String phoneNumber = charge.getAuthenticate().getValue();\n            FragmentTransaction ft = getSupportFragmentManager()\n                    .beginTransaction();\n            DialogFragment dialogFragment = new OTPFullScreenDialog();\n            Bundle b = new Bundle();\n            b.putString(\"phoneNumber\", phoneNumber);\n            dialogFragment.setArguments(b);\n            ft.add(dialogFragment, OTPFullScreenDialog.TAG);\n            ft.commitAllowingStateLoss();\n        } else {\n            closePaymentActivity();\n        }\n    }\n\n    @Override\n    public void confirmOTP() {\n        LoadingScreenManager.getInstance().showLoadingScreen(GoSellPaymentActivity.this);\n\n        Fragment fragment = getSupportFragmentManager().findFragmentByTag(OTPFullScreenDialog.TAG);\n        if (fragment != null)\n            getSupportFragmentManager().beginTransaction().remove(fragment).commit();\n    }\n\n    @Override\n    public void resendOTP() {\n        LoadingScreenManager.getInstance().showLoadingScreen(GoSellPaymentActivity.this);\n        Fragment fragment = getSupportFragmentManager().findFragmentByTag(OTPFullScreenDialog.TAG);\n        if (fragment != null)\n            getSupportFragmentManager().beginTransaction().remove(fragment).commit();\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n\n        switch (requestCode) {\n            case SCAN_REQUEST_CODE:\n                if (data != null && data.hasExtra(CardIOActivity.EXTRA_SCAN_RESULT)) {\n                    CreditCard scanResult = data.getParcelableExtra(CardIOActivity.EXTRA_SCAN_RESULT);\n                    dataSource.cardScanned(scanResult);\n                }\n                break;\n\n            case CURRENCIES_REQUEST_CODE:\n                if (data == null) break;\n                AmountedCurrency userChoiceCurrency = (AmountedCurrency) data\n                        .getSerializableExtra(CurrenciesActivity.CURRENCIES_ACTIVITY_USER_CHOICE_CURRENCY);\n                if (userChoiceCurrency != null) {\n                    stopPayButtonLoadingView();\n                   if(ThemeObject.getInstance().getPayButtonText()!=null){\n                       payButton.getPayButton().setText(\n                               String.format(\"%s %s%s\", ThemeObject.getInstance().getPayButtonText(), userChoiceCurrency\n                                       .getSymbol(), userChoiceCurrency.getAmount()));\n                   }else{\n                       payButton.getPayButton().setText(\n                               String.format(\"%s %s%s\", getResources().getString(R.string.pay), userChoiceCurrency\n                                       .getSymbol(), userChoiceCurrency.getAmount()));\n                   }\n                   updateDisplayedCards(userChoiceCurrency);\n                }\n              //  possiblyShowGooglePayButton();\n                break;\n\n            case WEB_PAYMENT_REQUEST_CODE:\n                if (data == null) break;\n                if (resultCode == RESULT_OK) {\n//                    Log.d(\"GoSellPaymentActivity\",\"data coming after closing WebPaymentActivity :\"+data.getSerializableExtra(\"charge\"));\n                    if (data.getSerializableExtra(\"charge\") != null) {\n                        Charge charge = (Charge) data.getSerializableExtra(\"charge\");\n                        if (charge != null) {\n                            fireWebPaymentCallBack(charge);\n                        } else {\n                            closePaymentActivity();\n                            SDKSession.getListener().sdkError(null);\n                        }\n                    } else {\n                        closePaymentActivity();\n                        SDKSession.getListener().sdkError(null);\n                    }\n                } else if (resultCode == RESULT_CANCELED) {\n//                    Log.d(\"GoSellPaymentActivity\",\"data coming after closing WebPaymentActivity :\"+data.getSerializableExtra(\"error\"));\n                    if (data.getSerializableExtra(\"error\") != null) {\n                        GoSellError goSellError = (GoSellError) data.getSerializableExtra(\"error\");\n                        if (goSellError != null) {\n                            closePaymentActivity();\n                            SDKSession.getListener().sdkError(goSellError);\n                        } else {\n                            closePaymentActivity();\n                            SDKSession.getListener().sdkError(null);\n                        }\n                    } else {\n                        closePaymentActivity();\n                        SDKSession.getListener().sdkError(null);\n                    }\n                }\n                break;\n            case ASYNCHRONOUS_REQUEST_CODE:\n                stopPayButtonLoadingView();\n                payButton.setEnabled(false);\n                new Handler().postDelayed(new Runnable() {\n                    @Override\n                    public void run() {\n                        // selectedCurrencyAsynchronous=false;\n                        finish();\n\n                    }\n                }, 1000);\n\n                break;\n            /**\n            *** Handling of received GooglePayLoad\n            **/\n            case LOAD_PAYMENT_DATA_REQUEST_CODE:\n                switch (resultCode) {\n\n                    case Activity.RESULT_OK:\n                        PaymentData paymentData = PaymentData.getFromIntent(data);\n                        if(paymentData!=null){\n                            handlePaymentSuccess(paymentData);\n\n                        }\n                        break;\n\n                    case Activity.RESULT_CANCELED:\n                        // The user cancelled the payment attempt\n                        try {\n                            //closePaymentActivity();\n                            SDKSession.getListener().sessionCancelled();\n                        } catch (Exception e) {\n                            closePaymentActivity();\n                        }\n                        break;\n\n                    case AutoResolveHelper.RESULT_ERROR:\n                        Status status = AutoResolveHelper.getStatusFromIntent(data);\n                        if(status!=null){\n                         //   System.out.println(\"status values are>>\"+status!=null ?status.getStatusMessage():status + \" >> code \"+status.getStatusCode());\n                            handleError(status);\n                        }\n                        break;\n                }\n\n                // Re-enables the Google Pay payment button.\n              //  googlePayButton.setClickable(true);\n                break;\n\n        }\n    }\n\n    private void fireWebPaymentCallBack(Charge charge) {\n        switch (charge.getStatus()) {\n            case CAPTURED:\n            case AUTHORIZED:\n                try {\n                    closePaymentActivity();\n                    SDKSession.getListener().paymentSucceed(charge);\n                } catch (Exception e) {\n                    Log.d(\"GoSellPaymentActivity\", \" Error while calling fireWebPaymentCallBack >>> method paymentSucceed(charge)\");\n                    closePaymentActivity();\n                }\n                break;\n            case FAILED:\n            case ABANDONED:\n            case CANCELLED:\n            case DECLINED:\n            case RESTRICTED:\n            case UNKNOWN:\n            case TIMEDOUT:\n                try {\n                    closePaymentActivity();\n                    SDKSession.getListener().paymentFailed(charge);\n                } catch (Exception e) {\n                    Log.d(\"GoSellPaymentActivity\", \" Error while calling fireWebPaymentCallBack >>> method paymentFailed(charge)\");\n                    closePaymentActivity();\n                }\n                break;\n\n        }\n    }\n\n    /**\n     * @param amountedCurrency this method will be called after user changes currency\n     */\n    private void updateDisplayedCards(AmountedCurrency amountedCurrency) {\n        // filter views\n        dataSource.currencySelectedByUser(amountedCurrency);\n        // refresh layout [ filter view models according to new currency - reload views ]\n        initViews();\n        // update currency section\n        dataSource.updateCurrencySection();\n    }\n\n\n    private void closePaymentActivity() {\n        clearPaymentProcessListeners();\n        finishActivity();\n    }\n\n\n    private void finishActivity() {\n        Fragment fragment = getSupportFragmentManager().findFragmentByTag(OTPFullScreenDialog.TAG);\n        if (fragment != null)\n            getSupportFragmentManager().beginTransaction().remove(fragment).commit();\n        LoadingScreenManager.getInstance().closeLoadingScreen();\n        closeActivity();\n    }\n\n    @Override\n    public void finish() {\n        super.finish();\n        overridePendingTransition(0, R.anim.slide_out_bottom);\n\n    }\n\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////\n\n    @Override\n    public void didReceiveCharge(Charge charge) {\n\n        if (charge == null) return;\n        Log.e(\"Charge status\", String.valueOf(charge.getStatus()));\n        switch (charge.getStatus()) {\n            case INITIATED:\n                Authenticate authenticate = charge.getAuthenticate();\n                if (authenticate != null && authenticate.getStatus() == AuthenticationStatus.INITIATED) {\n                    switch (authenticate.getType()) {\n                        case BIOMETRICS:\n\n                            break;\n\n                        case OTP:\n                            Log.d(\"GoSellPaymentActivity\", \" coming charge type is ...  caller didReceiveCharge\");\n                            PaymentDataManager.getInstance().setChargeOrAuthorize(charge);\n                            openOTPScreen(charge);\n                            break;\n                    }\n                }\n                break;\n            case CAPTURED:\n            case AUTHORIZED:\n                try {\n                    Log.d(\"didReceiveCharge\", \"payment succeeded ................................\");\n                    closePaymentActivity();\n                    SDKSession.getListener().paymentSucceed(charge);\n                } catch (Exception e) {\n                    closePaymentActivity();\n                    Log.d(\"GoSellPaymentActivity\", \" Error while calling delegate method paymentSucceed(charge)\");\n                }\n                break;\n            case FAILED:\n            case ABANDONED:\n            case CANCELLED:\n            case DECLINED:\n            case RESTRICTED:\n            case UNKNOWN:\n            case TIMEDOUT:\n                try {\n                    Log.d(\"didReceiveCharge\", \"payment failed...................................\");\n                    closePaymentActivity();\n                    SDKSession.getListener().paymentFailed(charge);\n                } catch (Exception e) {\n                    Log.d(\"GoSellPaymentActivity\", \" Error while calling delegate method paymentFailed(charge)\");\n                    closePaymentActivity();\n                }\n                break;\n            case IN_PROGRESS:\n                if (charge.getTransaction() != null && charge.getTransaction().isAsynchronous())\n                    if (main_windowed_scrollview != null) {\n                        RelativeLayout.LayoutParams layoutParams =\n                                new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\n                        main_windowed_scrollview.setLayoutParams(layoutParams);\n                        TranslateAnimation animate = new TranslateAnimation(0, 0, main_windowed_scrollview.getHeight(), 0);\n                        animate.setDuration(500);\n                        main_windowed_scrollview.startAnimation(animate);\n\n                    }\n                PaymentDataManager.getInstance().setChargeOrAuthorize(charge);\n                clearPaymentProcessListeners();\n                selectedCurrencyAsynchronous = false;\n                if (webPaymentViewModel != null) webPaymentViewModel.enableWebView();\n                new Handler().postDelayed(() ->\n                        openAsyncActivity(charge), 800);\n                break;\n        }\n        obtainPaymentURLFromChargeOrAuthorizeOrSaveCard(charge);\n\n    }\n\n    private void openAsyncActivity(Charge charge) {\n        SDKSession.getListener().asyncPaymentStarted(charge);\n        payButton.setEnabled(false);\n        stopPayButtonLoadingView();\n        Intent intent = new Intent(this, AsynchronousPaymentActivity.class);\n        finish();\n        startActivityForResult(intent, ASYNCHRONOUS_REQUEST_CODE);\n        overridePendingTransition(R.anim.slide_in_top, 0);\n\n    }\n\n\n    @Override\n    public void didReceiveSaveCard(SaveCard saveCard) {\n        // Log.d(\"GoSellPaymentActivity\",\" Cards >> didReceiveSaveCard * * * \" + saveCard);\n        if (saveCard == null) return;\n        //   Log.d(\"GoSellPaymentActivity\",\" Cards >> didReceiveSaveCard * * * status :\" + saveCard.getStatus());\n\n        switch (saveCard.getStatus()) {\n            case INITIATED:\n                Authenticate authenticate = saveCard.getAuthenticate();\n                if (authenticate != null && authenticate.getStatus() == AuthenticationStatus.INITIATED) {\n                    switch (authenticate.getType()) {\n                        case BIOMETRICS:\n\n                            break;\n\n                        case OTP:\n                            Log.d(\"GoSellPaymentActivity\", \" start otp for save card mode........\");\n                            PaymentDataManager.getInstance().setChargeOrAuthorize(saveCard);\n                            openOTPScreen(saveCard);\n                            break;\n                    }\n                }\n                break;\n            case CAPTURED:\n            case AUTHORIZED:\n            case VALID:\n                try {\n                    closePaymentActivity();\n                    SDKSession.getListener().cardSaved(saveCard);\n                } catch (Exception e) {\n                    Log.d(\"GoSellPaymentActivity\", \" Error while calling delegate method cardSaved(saveCard)\");\n                    closePaymentActivity();\n                }\n                break;\n            case INVALID:\n            case FAILED:\n            case ABANDONED:\n            case CANCELLED:\n            case DECLINED:\n            case RESTRICTED:\n                try {\n                    closePaymentActivity();\n                    SDKSession.getListener().cardSavingFailed(saveCard);\n                } catch (Exception e) {\n                    Log.d(\"GoSellPaymentActivity\", \" Error while calling delegate method cardSavingFailed(saveCard)\");\n                    closePaymentActivity();\n                }\n                break;\n        }\n        obtainPaymentURLFromChargeOrAuthorizeOrSaveCard(saveCard);\n    }\n\n    @Override\n    public void didCardSavedBefore() {\n        Log.d(\"GoSellPaymentActivity\", \" card already saved before ....\");\n        stopPayButtonLoadingView();\n\n    }\n\n    @Override\n    public void fireCardTokenizationProcessCompleted(Token token) {\n        closePaymentActivity();\n        SDKSession.getListener().cardTokenizedSuccessfully(token);\n        if(cardCredentialsViewModel!=null)\n        SDKSession.getListener().cardTokenizedSuccessfully(token,cardCredentialsViewModel.shouldSaveCard());\n    }\n\n\n    private void obtainPaymentURLFromChargeOrAuthorizeOrSaveCard(Charge chargeOrAuthorizeOrSaveCard) {\n        if (chargeOrAuthorizeOrSaveCard.getStatus() != ChargeStatus.INITIATED) {\n            return;\n        }\n\n        Authenticate authentication = chargeOrAuthorizeOrSaveCard.getAuthenticate();\n        if (authentication != null)\n            if (authentication != null && authentication.getStatus() == AuthenticationStatus.INITIATED) {\n                return;\n            }\n\n        String url = chargeOrAuthorizeOrSaveCard.getTransaction().getUrl();\n\n        if (url != null) {\n            setChargeOrAuthorizeOrSaveCard(chargeOrAuthorizeOrSaveCard);\n            LoadingScreenManager.getInstance().closeLoadingScreen();\n            showWebView(chargeOrAuthorizeOrSaveCard.getTransaction().getUrl());\n        }\n    }\n\n    private void showWebView(String url) {\n        RelativeLayout popup_window = new RelativeLayout(this);\n        FrameLayout.LayoutParams fl = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.FILL_PARENT,\n                FrameLayout.LayoutParams.FILL_PARENT);\n        popup_window.setLayoutParams(fl);\n        WebView w = new WebView(this);\n        w.setScrollContainer(false);\n        RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(\n                RelativeLayout.LayoutParams.FILL_PARENT, RelativeLayout.LayoutParams.FILL_PARENT);\n        w.setLayoutParams(params);\n        w.setWebViewClient(new CardPaymentWebViewClient());\n        WebSettings settings = w.getSettings();\n        settings.setJavaScriptEnabled(true);\n\n        popup_window.addView(w);\n        setContentView(popup_window);\n        w.loadUrl(url);\n    }\n\n    @Override\n    public void didCardDeleted(DeleteCardResponse deleteCardResponse) {\n        LoadingScreenManager.getInstance().closeLoadingScreen();\n        if (dataSource != null) dataSource.updateSavedCards(deleteCardResponse.getId());\n    }\n\n    @Override\n    public void didDeleteCardReceiveError(GoSellError errorDetails) {\n        LoadingScreenManager.getInstance().closeLoadingScreen();\n        PaymentOptionsDataManager dataOptionsManager = PaymentDataManager.getInstance().getPaymentOptionsDataManager(this);\n        if (dataOptionsManager != null) dataOptionsManager.cancelItemClicked();\n\n        if (errorDetails != null)\n            Log.d(\"GoSellPaymentActivity\", \"didDeleteCardReceiveError: response >>> \" + errorDetails.getErrorBody());\n\n        this.showDialog(getResources().getString(R.string.error_deleting_card_title), getResources().getString(R.string.error_deleting_card_msg), false);\n    }\n\n\n    /**\n     * The type Card payment web view client.\n     */\n    public class CardPaymentWebViewClient extends WebViewClient {\n\n        @Override\n        public void onPageStarted(WebView view, String url, Bitmap favicon) {\n            super.onPageStarted(view, url, favicon);\n\n\n        }\n\n        @Override\n        public boolean shouldOverrideUrlLoading(WebView view, String url) {\n            PaymentDataManager.WebPaymentURLDecision decision = PaymentDataManager.getInstance()\n                    .decisionForWebPaymentURL(url);\n\n            boolean shouldOverride = !decision.shouldLoad();\n            Log.e(\"shouldOverride\", String.valueOf(shouldOverride));\n            if (shouldOverride) { // if decision is true and response has TAP_ID\n                PaymentDataManager.getInstance().retrieveChargeOrAuthorizeOrSaveCardAPI(getChargeOrAuthorize());\n            }\n            return shouldOverride;\n        }\n\n        @Override\n        public void onPageFinished(WebView view, String url) {\n            super.onPageFinished(view, url);\n        }\n\n\n        @Override\n        public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n            super.onReceivedError(view, request, error);\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && error != null) {\n                Log.d(\"GoSellPaymentActivity\", \" onReceivedError : error  : \" + error.getErrorCode());\n                Log.d(\"GoSellPaymentActivity\", \" onReceivedError : desc  : \" + error.getDescription());\n            }\n\n        }\n\n        @Override\n        public void onReceivedHttpError(WebView view, WebResourceRequest request, WebResourceResponse errorResponse) {\n            super.onReceivedHttpError(view, request, errorResponse);\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n                Log.d(\"onReceivedHttpError\", \"web view ........reason lonReceivedHttpError .....\" + errorResponse.getReasonPhrase());\n                Log.d(\"onReceivedHttpError\", \"web view ........statuscode lonReceivedHttpError .....\" + errorResponse.getStatusCode());\n            }\n        }\n\n\n        @Override\n        public void onReceivedClientCertRequest(WebView view, ClientCertRequest request) {\n            super.onReceivedClientCertRequest(view, request);\n            Log.d(\"onReceivedClientCertReq\", \"web view ........ onReceivedClientCertRequest .....\");\n        }\n\n\n        @Override\n        public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {\n            super.onReceivedSslError(view, handler, error);\n            String err = (error != null) ? error.getUrl() : \"\";\n            Log.d(\"onLoadResource\", \"web view ........ onReceivedSslError ..... >> url[\" + err + \"]\");\n        }\n\n        @Override\n        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {\n            super.onReceivedError(view, errorCode, description, failingUrl);\n            Log.d(\"onReceivedError\", \"web view ........ onReceivedError ..... >> errorCode[\" + errorCode + \"]\");\n            Log.d(\"onReceivedError\", \"web view ........ onReceivedError ..... >> description[\" + description + \"]\");\n        }\n    }\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    @Override\n    public void didReceiveAuthorize(Authorize authorize) {\n        Log.d(\"GoSellPaymentActivity\", \" Cards >> didReceiveAuthorize * * * \");\n        if (authorize == null) return;\n        //  Log.d(\"GoSellPaymentActivity\",\" Cards >> didReceiveAuthorize * * * \" + authorize.getStatus());\n\n        switch (authorize.getStatus()) {\n            case INITIATED:\n                Authenticate authenticate = authorize.getAuthenticate();\n                if (authenticate != null && authenticate.getStatus() == AuthenticationStatus.INITIATED) {\n                    switch (authenticate.getType()) {\n                        case BIOMETRICS:\n\n                            break;\n\n                        case OTP:\n                            PaymentDataManager.getInstance().setChargeOrAuthorize((Authorize) authorize);\n                            openOTPScreen((Authorize) authorize);\n                            break;\n                    }\n                }\n                break;\n            case CAPTURED:\n            case AUTHORIZED:\n                try {\n                    closePaymentActivity();\n                    SDKSession.getListener().authorizationSucceed(authorize);\n                } catch (Exception e) {\n                    Log.d(\"GoSellPaymentActivity\", \" Error while calling delegate method authorizationSucceed(authorize)\");\n                    closePaymentActivity();\n                }\n                break;\n            case FAILED:\n            case ABANDONED:\n            case CANCELLED:\n            case DECLINED:\n            case RESTRICTED:\n                try {\n                    closePaymentActivity();\n                    SDKSession.getListener().authorizationFailed(authorize);\n                } catch (Exception e) {\n                    Log.d(\"GoSellPaymentActivity\", \" Error while calling delegate method authorizationFailed(authorize)\");\n                    closePaymentActivity();\n                }\n                break;\n        }\n        obtainPaymentURLFromChargeOrAuthorizeOrSaveCard(authorize);\n    }\n\n    @Override\n    public void didReceiveError(GoSellError error) {\n        try {\n            closePaymentActivity();\n            SDKSession.getListener().sdkError(error);\n        } catch (Exception e) {\n            Log.d(\"GoSellPaymentActivity\", \"Error while try to call delegate method  sdkError(error)\");\n            closePaymentActivity();\n        }\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////\n\n    private void setChargeOrAuthorizeOrSaveCard(Charge chargeOrAuthorizeOrSaveCard) {\n        this.chargeOrAuthorizeOrSaveCard = chargeOrAuthorizeOrSaveCard;\n    }\n\n\n    private Charge getChargeOrAuthorize() {\n        return chargeOrAuthorizeOrSaveCard;\n    }\n\n\n    private void stopPayButtonLoadingView() {\n        LoadingScreenManager.getInstance().closeLoadingScreen();\n        if (payButton.getLoadingView() != null) {\n            if (payButton.getLoadingView().isShown())\n                payButton.getLoadingView().setForceStop(true);\n        }\n    }\n\n    ////////////////////////////////////////////////////////////////////////////////////////////////\n\n    private void clearPaymentProcessListeners() {\n        if (PaymentDataManager.getInstance() != null)\n            PaymentDataManager.getInstance().clearPaymentProcessListeners();\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        setupPayButton();\n        if (recentSectionViewModel != null) recentSectionViewModel.EnableRecentView();\n        if (webPaymentViewModel != null) webPaymentViewModel.enableWebView();\n        PaymentDataManager.getInstance().setCardPaymentProcessStatus(false);\n        if (cardCredentialsViewModel != null) cardCredentialsViewModel.enableCardScanView();\n\n    }\n\n\n    @Override\n    protected void onRestart() {\n        super.onRestart();\n        setupPayButton();\n        if (recentSectionViewModel != null) recentSectionViewModel.EnableRecentView();\n        if (webPaymentViewModel != null) webPaymentViewModel.enableWebView();\n        PaymentDataManager.getInstance().setCardPaymentProcessStatus(false);\n        if (cardCredentialsViewModel != null) cardCredentialsViewModel.enableCardScanView();\n    }\n\n\n    private void closeActivity() {\n        clearPaymentProcessListeners();\n        setResult(RESULT_OK);\n        if (recentSectionViewModel != null) recentSectionViewModel.EnableRecentView();\n        if (webPaymentViewModel != null) webPaymentViewModel.enableWebView();\n        PaymentDataManager.getInstance().setCardPaymentProcessStatus(false);\n        if (cardCredentialsViewModel != null) cardCredentialsViewModel.enableCardScanView();\n        finish();\n    }\n\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n    private void startPaymentProcess() {\n        checkInternetConnectivity();\n    }\n\n    private void checkInternetConnectivity() {\n        ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(CONNECTIVITY_SERVICE);\n        if (connectivityManager != null) {\n            NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();\n            if (activeNetworkInfo != null && activeNetworkInfo.isConnected()) {\n                LoadingScreenManager.getInstance().showLoadingScreen(this);\n                if (getSavedCard() != null) {\n                    startSavedCardPaymentProcess();\n                } else {\n                    startCardPaymentProcess(cardCredentialsViewModel);\n                }\n            } else\n                showDialog(getResources().getString(R.string.internet_connectivity_title), getResources().getString(R.string.internet_connectivity_message), true);\n        } else\n            Log.d(\"checkInternetConnectv\", \" some error in connectivity manager...\");\n    }\n\n    private void showDialog(String title, String message, boolean showNegativeButton) {\n        AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(this);\n        dialogBuilder.setTitle(title);\n        dialogBuilder.setMessage(message);\n        dialogBuilder.setCancelable(false);\n\n        dialogBuilder.setPositiveButton(getResources().getString(R.string.dismiss), (dialog, which) -> System.out.println(\" user dismissed process.....\"));\n\n        if (showNegativeButton)\n            dialogBuilder.setNegativeButton(getResources().getString(R.string.retry), (dialog, which) -> checkInternetConnectivity());\n\n        dialogBuilder.show();\n\n    }\n\n    private void startPaymentWithTimer() {\n        new CountDownTimer(1000, 1000) {\n            @Override\n            public void onTick(long millisUntilFinished) {\n            }\n\n            @Override\n            public void onFinish() {\n                startPaymentProcess();\n            }\n        }.start();\n    }\n    private void handlePaymentSuccess(PaymentData paymentData) {\n        // Token will be null if PaymentDataRequest was not constructed using fromJson(String).\n        final String paymentInfo = paymentData.toJson();\n        if (paymentInfo == null) {\n            return;\n        }\n        LoadingScreenManager.getInstance().showLoadingScreen(this);\n        try {\n            JSONObject paymentMethodData = new JSONObject(paymentInfo).getJSONObject(\"paymentMethodData\");\n         //   System.out.println(\"paymentMethodData\"+paymentMethodData);\n            // If the gateway is set to \"example\", no payment information is returned - instead, the\n            // token will only consist of \"examplePaymentMethodToken\".\n            final JSONObject tokenizationData = paymentMethodData.getJSONObject(\"tokenizationData\");\n           // System.out.println(\"tokenizationData>>>\"+tokenizationData);\n            final String tokenizationType = tokenizationData.getString(\"type\");\n          //  System.out.println(\"tokenizationType is\"+tokenizationType);\n            final String token = tokenizationData.getString(\"token\");\n          //  System.out.println(\"token is\"+token);\n            Gson gson = new Gson();\n            JsonObject jsonToken = gson.fromJson(token, JsonObject.class);\n            /**\n             * At this stage, Passing the googlePaylaod to Tap Backend TokenAPI call followed by chargeAPI.\n             * ***/\n            CreateTokenGPayRequest createTokenGPayRequest = new CreateTokenGPayRequest(\"googlepay\",jsonToken);\n            initiateGooglePayProcess(createTokenGPayRequest);\n\n        } catch (JSONException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * At this stage, the user has already seen a popup informing them an error occurred. Normally,\n     * only logging is required.\n     *\n     * @param status object\n     * @see <a href=\"https://developers.google.com/android/reference/com/google/android/gms/wallet/\n     * WalletConstants#constant-summary\">Wallet Constants Library</a>\n     */\n    private void handleError(Status status) {\n        Log.e(\"loadPaymentData failed\", String.format(\"Error code: %d\", status.getStatusCode()));\n        try {\n            closePaymentActivity();\n            SDKSession.getListener().googlePayFailed(status.getStatusMessage());\n        } catch (Exception e) {\n            closePaymentActivity();\n        }\n\n    }\n\n\n    public void initiateGooglePayProcess(CreateTokenGPayRequest createTokenGPayRequest){\n        getVisibleViewModels();\n        PaymentDataManager.getInstance().initiateGooglePayTokenPayment(googlePayViewModel, this,createTokenGPayRequest);\n    }\n\n\n    /**\n     * Determine the viewer's ability to pay with a payment method supported by your app and display a\n     * Google Pay payment button.\n     *\n     * @see <a href=\"https://developers.google.com/android/reference/com/google/android/gms/wallet/\n     * PaymentsClient.html#isReadyToPay(com.google.android.gms.wallet.\n     * IsReadyToPayRequest)\">PaymentsClient#IsReadyToPay</a>\n     */\n    @RequiresApi(api = Build.VERSION_CODES.N)\n    private void possiblyShowGooglePayButton() {\n\n        final Optional<JSONObject> isReadyToPayJson = PaymentsUtil.getIsReadyToPayRequest();\n      //  System.out.println(\"isReadyToPayJson\"+isReadyToPayJson);\n        if (!isReadyToPayJson.isPresent()) {\n            return;\n        }\n\n        // The call to isReadyToPay is asynchronous and returns a Task. We need to provide an\n        // OnCompleteListener to be triggered when the result of the call is known.\n        IsReadyToPayRequest request = IsReadyToPayRequest.fromJson(isReadyToPayJson.get().toString());\n        Task<Boolean> task = paymentsClient.isReadyToPay(request);\n        task.addOnCompleteListener(this , task1 -> {\n            if (task1.isSuccessful()) {\n              //  System.out.println(\"do we reach\"+task1.getResult());\n                setGooglePayAvailable(task1.getResult());\n                gPayFlag = task1.getResult();\n            } else {\n                SDKSession.getListener().googlePayFailed(task.getException().toString());\n                gPayFlag = false;\n               PaymentDataManager.getInstance().getPaymentOptionsDataManager().removeview();\n                Log.w(\"isReadyToPay failed\", task1.getException());\n            }\n\n            //System.out.println(\"task1 is\"+task1.getResult());\n        });\n    }\n\n    /**\n     * If isReadyToPay returned {@code true}, show the button and hide the \"checking\" text. Otherwise,\n     * notify the user that Google Pay is not available. Please adjust to fit in with your current\n     * user flow. You are not required to explicitly let the user know if isReadyToPay returns {@code\n     * false}.\n     *\n     * @param available isReadyToPay API response.\n     */\n    private void setGooglePayAvailable(boolean available) {\n       // System.out.println(\"available\"+available);\n        googlePayButton = findViewById(R.id.googlePayButton);\n        if (available) {\n            if(googlePayButton!=null)\n            googlePayButton.setVisibility(View.VISIBLE);\n\n        } else {\n            googlePayButton.setVisibility(View.GONE);\n            Toast.makeText(this,R.string.googlepay_button_not_supported, Toast.LENGTH_LONG).show();\n        }\n    }\n}\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/library/src/main/java/company/tap/gosellapi/internal/activities/GoSellPaymentActivity.java b/library/src/main/java/company/tap/gosellapi/internal/activities/GoSellPaymentActivity.java
--- a/library/src/main/java/company/tap/gosellapi/internal/activities/GoSellPaymentActivity.java	(revision 889cae1b9134eef789740484cf832b06c77287cf)
+++ b/library/src/main/java/company/tap/gosellapi/internal/activities/GoSellPaymentActivity.java	(date 1667991365014)
@@ -1139,9 +1139,9 @@
     @Override
     public void fireCardTokenizationProcessCompleted(Token token) {
         closePaymentActivity();
-        SDKSession.getListener().cardTokenizedSuccessfully(token);
         if(cardCredentialsViewModel!=null)
         SDKSession.getListener().cardTokenizedSuccessfully(token,cardCredentialsViewModel.shouldSaveCard());
+        SDKSession.getListener().cardTokenizedSuccessfully(token);
     }
 
 
Index: goSellSDKSample/src/main/java/company/tap/sample/managers/SettingsManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package company.tap.sample.managers;\n\nimport android.content.Context;\nimport android.content.SharedPreferences;\nimport android.graphics.Color;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\n\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\n\nimport company.tap.gosellapi.internal.api.enums.AuthorizeActionType;\nimport company.tap.gosellapi.internal.api.enums.measurements.Measurement;\nimport company.tap.gosellapi.internal.api.models.AmountModificator;\nimport company.tap.gosellapi.internal.api.models.PhoneNumber;\nimport company.tap.gosellapi.internal.api.models.Quantity;\nimport company.tap.gosellapi.open.enums.AppearanceMode;\nimport company.tap.gosellapi.open.enums.OperationMode;\nimport company.tap.gosellapi.open.enums.TransactionMode;\nimport company.tap.gosellapi.open.models.AuthorizeAction;\nimport company.tap.gosellapi.open.models.Customer;\nimport company.tap.gosellapi.open.models.Destination;\nimport company.tap.gosellapi.open.models.Destinations;\nimport company.tap.gosellapi.open.models.PaymentItem;\nimport company.tap.gosellapi.open.models.Receipt;\nimport company.tap.gosellapi.open.models.Reference;\nimport company.tap.gosellapi.open.models.Shipping;\nimport company.tap.gosellapi.open.models.TapCurrency;\nimport company.tap.gosellapi.open.models.Tax;\nimport company.tap.sample.viewmodels.CustomerViewModel;\n\nimport static company.tap.gosellapi.internal.api.enums.AmountModificatorType.FIXED;\nimport static company.tap.gosellapi.internal.api.enums.measurements.Mass.KILOGRAMS;\n\npublic class SettingsManager {\n\n    private SharedPreferences pref ;\n    private Context context;\n\n    public void setPref(Context ctx){\n        context = ctx;\n        if(pref==null) pref = PreferenceManager.getDefaultSharedPreferences(ctx);\n    }\n\n    public static SettingsManager getInstance(){\n        return SingleInstanceAdmin.instance;\n    }\n\n    public void saveCustomer(String name,String middle,String last, String email,String sdn, String mobile, Context ctx) {\n\n        SharedPreferences preferences =  PreferenceManager.getDefaultSharedPreferences(ctx);\n\n        Gson gson = new Gson();\n\n        String response = preferences.getString(\"customer\" , \"\");\n\n        ArrayList<CustomerViewModel> customersList = gson.fromJson(response,\n                new TypeToken<List<CustomerViewModel>>(){}.getType());\n\n        if(customersList==null) customersList = new ArrayList<>();\n\n\n        customersList.add(new CustomerViewModel(null,name,middle,last,email,sdn,mobile));\n\n\n        String data =  gson.toJson(customersList);\n\n        writeCustomersToPreferences(data,preferences);\n    }\n\n    public void editCustomer(CustomerViewModel oldCustomer, CustomerViewModel newCustomer, Context ctx){\n\n        SharedPreferences preferences =  PreferenceManager.getDefaultSharedPreferences(ctx);\n\n        Gson gson = new Gson();\n\n        String response = preferences.getString(\"customer\",\"\");\n\n        ArrayList<CustomerViewModel> customersList = gson.fromJson(response,\n                new TypeToken<List<CustomerViewModel>>(){}.getType());\n\n        if(customersList!=null){\n           String customerRef =customersList.get(0).getRef();\n            customersList.clear();\n\n            customersList.add(new CustomerViewModel(\n                    customerRef,\n                    newCustomer.getName(),\n                    newCustomer.getMiddleName(),\n                    newCustomer.getLastName(),\n                    newCustomer.getEmail(),\n                    newCustomer.getSdn(),\n                    newCustomer.getMobile()));\n\n            String data =  gson.toJson(customersList);\n\n            writeCustomersToPreferences(data,preferences);\n\n        }else {\n            saveCustomer(newCustomer.getName(),\n                    newCustomer.getMiddleName(),\n                    newCustomer.getLastName(),\n                    newCustomer.getEmail(),\n                    newCustomer.getSdn(),\n                    newCustomer.getMobile(),ctx);\n        }\n    }\n\n    private void writeCustomersToPreferences(String data, SharedPreferences preferences){\n        SharedPreferences.Editor editor =  preferences.edit();\n        editor.putString(\"customer\",data);\n        editor.commit();\n    }\n\n    public List<CustomerViewModel> getRegisteredCustomers(Context ctx) {\n        SharedPreferences preferences =  PreferenceManager.getDefaultSharedPreferences(ctx);\n        Gson gson = new Gson();\n\n        String response = preferences.getString(\"customer\",\"\");\n\n        ArrayList<CustomerViewModel> customersList = gson.fromJson(response,\n                new TypeToken<List<CustomerViewModel>>(){}.getType());\n\n        return (customersList!=null)?customersList:new ArrayList<>();\n    }\n\n    //////////////////////////////////////   Get Payment Settings ////////////////////////////////\n\n    public Customer getCustomer(){\n\n        Customer customer;\n\n        Gson gson = new Gson();\n        String response = pref.getString(\"customer\", \"\");\n        System.out.println(\" get customer: \"+response);\n        ArrayList<company.tap.gosellapi.open.viewmodel.CustomerViewModel> customersList = gson.fromJson(response,\n                new TypeToken<List<company.tap.gosellapi.open.viewmodel.CustomerViewModel>>() {\n                }.getType());\n\n        // check if customer id is in pref.\n\n\n\n        if (customersList != null) {\n            System.out.println(\"preparing data source with customer ref :\" + customersList.get(0).getRef());\n            customer =\n                    new Customer.CustomerBuilder(customersList.get(0).getRef()).\n                            firstName(customersList.get(0).getName()).\n                            middleName(customersList.get(0).getMiddleName()).\n                            lastName(customersList.get(0).getLastName()).\n                            email(customersList.get(0).getEmail()).\n                            phone(new PhoneNumber(customersList.get(0).getSdn(),\n                                    customersList.get(0).getMobile()\n                            )).\n                            metadata(\"meta\").\n                            build();\n        } else {\n            System.out.println(\" paymentResultDataManager.getCustomerRef(context) null\");\n            //65562630\n            customer = new Customer.CustomerBuilder(null).\n                    firstName(\"Name\").\n                    middleName(\"MiddleName\").\n                    lastName(\"Surname\").\n                    email(\"hello@tap.company\").\n                    phone(new PhoneNumber(\"965\", \"69045932\")).\n                    metadata(\"meta\").\n                    build();\n        }\n      //  65562630\n        return customer;\n    }\n\n    public ArrayList<PaymentItem> getPaymentItems(){\n        ArrayList<PaymentItem> items = new ArrayList<>();\n\n        items.add(\n                new PaymentItem.PaymentItemBuilder(\"\", new Quantity(Measurement.MASS,KILOGRAMS, BigDecimal.TEN), BigDecimal.TEN)\n                        .description(\"Description for test item #1\")\n                        .discount(new AmountModificator(FIXED, BigDecimal.ZERO))\n                        .taxes(null)\n                        .build());\n\n        return  items;\n    }\n\n    public ArrayList<Tax> getTaxes(){\n        ArrayList<Tax> taxes = new ArrayList<Tax>();\n        taxes.\n                add(new Tax(\"Test tax #1\",\n                        \"Test tax #1 description\",\n                        new AmountModificator(FIXED, BigDecimal.TEN)));\n        return taxes;\n    }\n\n    public ArrayList<Shipping> getShippingList(){\n        ArrayList<Shipping> shipping = new ArrayList<Shipping>();\n        shipping.\n                add(new Shipping(\"Test shipping #1\",\n                        \"Test shipping description #1\",\n                        BigDecimal.ONE));\n        return shipping;\n    }\n\n    public String getPostURL(){\n//        Base URL\n        return  \"https://tap.company\";\n    }\n\n    public String getPaymentDescription(){\n        return  \"Test payment description.\";\n    }\n\n    public HashMap<String,String> getPaymentMetaData(){\n        HashMap<String,String> paymentMetadata = new HashMap<>();\n        paymentMetadata.put(\"metadata_key_1\", \"metadata value 1\");\n        return paymentMetadata;\n    }\n\n    public Reference getPaymentReference(){\n        Reference paymentReference = new Reference(\n                \"acquirer_1\",\n                \"gateway_1\",\n                \"payment_1\",\n                \"track_1\",\n                \"transaction_1\",\n                \"order_1\");\n        return paymentReference;\n    }\n\n    public String getPaymentStatementDescriptor(){\n        return \"Test payment statement descriptor.\";\n    }\n\n    public Receipt getReceipt(){\n        return new Receipt(true, true);\n    }\n\n    public AuthorizeAction getAuthorizeAction(){\n        return new AuthorizeAction(AuthorizeActionType.VOID, 10);\n    }\n\n    public Destinations getDestination() {\n        ArrayList<Destination> destinations = new ArrayList<Destination>();\n        destinations.\n                add(new Destination(\n                        \"1014\", /// destination unique identifier\n                        new BigDecimal(10), // Amount to be transferred to the destination account\n                        new TapCurrency(\"kwd\"), //currency code (three digit ISO format)\n                        \"please deduct 10 kd for this account\", //Description about the transfer\n                        \"\" //Merchant reference number to the destination\n                ));\n\n        return new Destinations(\n                new BigDecimal(10),  // total amount, transferred to the destination account\n                new TapCurrency(\"kwd\"),  // transfer currency code\n                1,  //number of destinations trabsfer involved\n                destinations); //List of destinations object\n    }\n\n\n    ////////////////////////////////////////////////// Specific Settings ////////////////////////////\n\n    /**\n     * Session Data Source\n     */\n\n    public OperationMode getSDKOperationMode(String key){\n        String op_mode = pref.getString(key,OperationMode.SAND_BOX.name());\n\n        if(op_mode.equals(OperationMode.SAND_BOX.name())) return OperationMode.SAND_BOX;\n\n        return OperationMode.PRODUCTION;\n    }\n\n    /**\n     * get Transaction mode\n     * @param key\n     * @return\n     */\n    public TransactionMode getTransactionsMode(String key){\n        String trx_mode = pref.getString(key, TransactionMode.PURCHASE.name());\n\n        if (trx_mode.equalsIgnoreCase(TransactionMode.PURCHASE.name()))\n            return TransactionMode.PURCHASE;\n\n        if (trx_mode.equalsIgnoreCase(TransactionMode.AUTHORIZE_CAPTURE.name()))\n            return TransactionMode.AUTHORIZE_CAPTURE;\n\n        if(trx_mode.equalsIgnoreCase(TransactionMode.TOKENIZE_CARD.name()))\n            return TransactionMode.TOKENIZE_CARD;\n\n        return TransactionMode.SAVE_CARD;\n\n    }\n\n\n    /**\n     * get transaction currency\n     * @param key\n     * @return\n     */\n\n    public TapCurrency getTransactionCurrency(String key){\n\n        String trx_curr = pref.getString(key, \"kwd\");\n\n        Log.d(\"Settings Manager\",\"trx_curr :\"+trx_curr.trim());\n\n        if(trx_curr!=null  && !\"\".equalsIgnoreCase(trx_curr.trim()))\n            return new TapCurrency(trx_curr);\n        else\n           return new TapCurrency(\"kwd\");\n    }\n\n    /**\n     * Get Appearance Mode [FULLSCREEN_MODE - WINDOWED_MODE]\n     * @param key\n     * @return\n     */\n    public AppearanceMode getAppearanceMode(String key)\n    {\n        String mode =  pref.getString(key,AppearanceMode.FULLSCREEN_MODE.name());\n        if(mode.equals(AppearanceMode.WINDOWED_MODE.name())) return AppearanceMode.WINDOWED_MODE;\n\n        return AppearanceMode.FULLSCREEN_MODE;\n    }\n\n    //////////////////////////////////////////////////  General ////////////////////////////////\n\n\n    /**\n     * Get Font name saved in session or return default\n     * @param key\n     * @param defaultFont\n     * @return\n     */\n    public String getFont(String key,String defaultFont){\n        System.out.println(\"pref: \"+ pref.getString(key,defaultFont));\n        return pref.getString(key,defaultFont);\n    }\n\n    /**\n     * Get Color saved in session or return default\n     * @param key\n     * @param defaultColor\n     * @return\n     */\n    public int getColor(String key,int defaultColor){\n        String color = pref.getString(key, \"\");\n       return extractColorCode(color,defaultColor);\n    }\n\n\n    /**\n     *\n     * @param key\n     * @return\n     */\n    public boolean getBoolean(String key,boolean defaultValue){\n        return pref.getBoolean(key,defaultValue);\n    }\n\n    /**\n     *\n     * @param key\n     * @param defaultValue\n     * @return\n     */\n    public String getString(String key,String defaultValue ){\n        return pref.getString(key,defaultValue);\n    }\n\n    public int getInt(String key,int defaultValue ){\n       return pref.getInt(key,defaultValue) ;\n    }\n\n\n    //////////////////////////////////////////////////  PayButton /////////////////////////////////\n    public int getTapButtonEnabledBackgroundColor(String key){\n        String color = pref.getString(key, \"\");\n        return extractEnabledBackgroundColorCode(color,company.tap.gosellapi.R.color.vibrant_green_pressed);\n    }\n\n\n    public int getTapButtonDisabledBackgroundColor(String key){\n        String color = pref.getString(key, \"\");\n        return extractDisabledBackgroundColorCode(color);\n    }\n\n    private int extractEnabledBackgroundColorCode(String color,int defaultColor) {\n        if(color.trim().equalsIgnoreCase(\"\")) return defaultColor;\n        return Color.parseColor(color.split(\"_\")[1]);\n    }\n\n    private int extractDisabledBackgroundColorCode(String color) {\n        if(color.trim().equalsIgnoreCase(\"\")) return company.tap.gosellapi.R.color.silver_light;\n        return Color.parseColor(color.split(\"_\")[1]);\n    }\n\n    public String getTapButtonFont(String key){\n        String font = pref.getString(key, \"\");\n        return font;\n    }\n\n    public int getTapButtonDisabledTitleColor(String key,int defaultColor){\n        String color = pref.getString(key, \"\");\n        return  extractColorCode(color,defaultColor);\n    }\n\n////////////////////////////////////////////  UTILS  //////////////////////////////////////////////\n\n    public int getTapButtonEnabledTitleColor(String key,int defaultColor){\n        String color = pref.getString(key, \"\");\n        return extractColorCode(color,defaultColor);\n    }\n\n    private int extractColorCode(String color,int defaultColor) {\n        if(color.trim().equalsIgnoreCase(\"\")) return defaultColor;\n        return Color.parseColor(color.split(\"_\")[1]);\n    }\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n    private static class SingleInstanceAdmin{\n        static SettingsManager instance = new SettingsManager();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/goSellSDKSample/src/main/java/company/tap/sample/managers/SettingsManager.java b/goSellSDKSample/src/main/java/company/tap/sample/managers/SettingsManager.java
--- a/goSellSDKSample/src/main/java/company/tap/sample/managers/SettingsManager.java	(revision 889cae1b9134eef789740484cf832b06c77287cf)
+++ b/goSellSDKSample/src/main/java/company/tap/sample/managers/SettingsManager.java	(date 1667991448103)
@@ -283,7 +283,7 @@
      * @return
      */
     public TransactionMode getTransactionsMode(String key){
-        String trx_mode = pref.getString(key, TransactionMode.PURCHASE.name());
+        String trx_mode = pref.getString(key, TransactionMode.TOKENIZE_CARD.name());
 
         if (trx_mode.equalsIgnoreCase(TransactionMode.PURCHASE.name()))
             return TransactionMode.PURCHASE;
